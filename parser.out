Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> ALPHABET
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> LPAREN expression RPAREN
Rule 4     expression -> expression expression
Rule 5     expression -> expression TIMES

Terminals, with rules where they appear

ALPHABET             : 1
LPAREN               : 3
PLUS                 : 2
RPAREN               : 3
TIMES                : 5
error                : 

Nonterminals, with rules where they appear

expression           : 2 2 3 4 4 5 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . ALPHABET
    (2) expression -> . expression PLUS expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression expression
    (5) expression -> . expression TIMES

    ALPHABET        shift and go to state 1
    LPAREN          shift and go to state 2

    expression                     shift and go to state 3

state 1

    (1) expression -> ALPHABET .

    PLUS            reduce using rule 1 (expression -> ALPHABET .)
    TIMES           reduce using rule 1 (expression -> ALPHABET .)
    ALPHABET        reduce using rule 1 (expression -> ALPHABET .)
    LPAREN          reduce using rule 1 (expression -> ALPHABET .)
    RPAREN          reduce using rule 1 (expression -> ALPHABET .)
    $end            reduce using rule 1 (expression -> ALPHABET .)


state 2

    (3) expression -> LPAREN . expression RPAREN
    (1) expression -> . ALPHABET
    (2) expression -> . expression PLUS expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression expression
    (5) expression -> . expression TIMES

    ALPHABET        shift and go to state 1
    LPAREN          shift and go to state 2

    expression                     shift and go to state 4

state 3

    (0) S' -> expression .
    (2) expression -> expression . PLUS expression
    (4) expression -> expression . expression
    (5) expression -> expression . TIMES
    (1) expression -> . ALPHABET
    (2) expression -> . expression PLUS expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression expression
    (5) expression -> . expression TIMES

    PLUS            shift and go to state 6
    TIMES           shift and go to state 5
    ALPHABET        shift and go to state 1
    LPAREN          shift and go to state 2

    expression                     shift and go to state 7

state 4

    (3) expression -> LPAREN expression . RPAREN
    (2) expression -> expression . PLUS expression
    (4) expression -> expression . expression
    (5) expression -> expression . TIMES
    (1) expression -> . ALPHABET
    (2) expression -> . expression PLUS expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression expression
    (5) expression -> . expression TIMES

    RPAREN          shift and go to state 8
    PLUS            shift and go to state 6
    TIMES           shift and go to state 5
    ALPHABET        shift and go to state 1
    LPAREN          shift and go to state 2

    expression                     shift and go to state 7

state 5

    (5) expression -> expression TIMES .

    PLUS            reduce using rule 5 (expression -> expression TIMES .)
    TIMES           reduce using rule 5 (expression -> expression TIMES .)
    ALPHABET        reduce using rule 5 (expression -> expression TIMES .)
    LPAREN          reduce using rule 5 (expression -> expression TIMES .)
    RPAREN          reduce using rule 5 (expression -> expression TIMES .)
    $end            reduce using rule 5 (expression -> expression TIMES .)


state 6

    (2) expression -> expression PLUS . expression
    (1) expression -> . ALPHABET
    (2) expression -> . expression PLUS expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression expression
    (5) expression -> . expression TIMES

    ALPHABET        shift and go to state 1
    LPAREN          shift and go to state 2

    expression                     shift and go to state 9

state 7

    (4) expression -> expression expression .
    (2) expression -> expression . PLUS expression
    (4) expression -> expression . expression
    (5) expression -> expression . TIMES
    (1) expression -> . ALPHABET
    (2) expression -> . expression PLUS expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression expression
    (5) expression -> . expression TIMES

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for ALPHABET resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    RPAREN          reduce using rule 4 (expression -> expression expression .)
    $end            reduce using rule 4 (expression -> expression expression .)
    PLUS            shift and go to state 6
    TIMES           shift and go to state 5
    ALPHABET        shift and go to state 1
    LPAREN          shift and go to state 2

  ! PLUS            [ reduce using rule 4 (expression -> expression expression .) ]
  ! TIMES           [ reduce using rule 4 (expression -> expression expression .) ]
  ! ALPHABET        [ reduce using rule 4 (expression -> expression expression .) ]
  ! LPAREN          [ reduce using rule 4 (expression -> expression expression .) ]

    expression                     shift and go to state 7

state 8

    (3) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    ALPHABET        reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 3 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 3 (expression -> LPAREN expression RPAREN .)


state 9

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (4) expression -> expression . expression
    (5) expression -> expression . TIMES
    (1) expression -> . ALPHABET
    (2) expression -> . expression PLUS expression
    (3) expression -> . LPAREN expression RPAREN
    (4) expression -> . expression expression
    (5) expression -> . expression TIMES

    PLUS            reduce using rule 2 (expression -> expression PLUS expression .)
    ALPHABET        reduce using rule 2 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 2 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression PLUS expression .)
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 5

  ! TIMES           [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! ALPHABET        [ shift and go to state 1 ]
  ! LPAREN          [ shift and go to state 2 ]

    expression                     shift and go to state 7
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 7 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 7 resolved as shift
WARNING: shift/reduce conflict for ALPHABET in state 7 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 7 resolved as shift
